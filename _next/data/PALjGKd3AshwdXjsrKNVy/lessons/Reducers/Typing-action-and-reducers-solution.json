{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"typing-actions-with-reducers-solution\"><strong>Typing Actions with Reducers Solution</strong></h1>\n<br>\n\n<p>Alright, let&#39;s get one of those <code>ColorChangeSwatches</code> wired up to our state management. We&#39;ve already got the action in place from earlier, so that&#39;s nice.</p>\n<p>Let&#39;s go for those saved colors that don&#39;t really save. (They&#39;re hard-coded.)</p>\n<p>we&#39;re get ready for our <code>dispatch</code> prop in <code>src/components/saved-colors/index.tsx</code>:</p>\n<p>In <code>src/components/application.tsx</code>:</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -22,7 +22,7 @@</span> const Application = () =&gt; {\n       /&gt;\n       &lt;AdjustColors hexColor={hexColor} dispatch={dispatch} /&gt;\n       &lt;RelatedColors hexColor={hexColor} /&gt;\n<span class=\"hljs-deletion\">-      &lt;SavedColors hexColor={hexColor} /&gt;</span>\n<span class=\"hljs-addition\">+      &lt;SavedColors hexColor={hexColor} dispatch={dispatch} /&gt;</span>\n     &lt;/div&gt;\n   );\n };\n</code></pre>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -1,10 +1,11 @@</span>\n<span class=\"hljs-deletion\">-import { useState } from &#x27;react&#x27;;</span>\n<span class=\"hljs-addition\">+import { Dispatch, useState } from &#x27;react&#x27;;</span>\n import id from &#x27;lodash.uniqueid&#x27;;\n import AddSavedColor from &#x27;./add-saved-color&#x27;;\n import SavedColor from &#x27;./saved-color&#x27;;\n\n type SavedColorsProps = {\n   hexColor: string;\n<span class=\"hljs-addition\">+  dispatch: Dispatch&lt;ColorActions&gt;;</span>\n };\n\n const saved = [\n<span class=\"hljs-meta\">@@ -12,7 +13,7 @@</span> const saved = [\n   { id: id(), name: &#x27;Blue Fire&#x27;, hexColor: &#x27;#00aadd&#x27; },\n ];\n\n<span class=\"hljs-deletion\">-const SavedColors = ({ hexColor }: SavedColorsProps) =&gt; {</span>\n<span class=\"hljs-addition\">+const SavedColors = ({ hexColor, dispatch }: SavedColorsProps) =&gt; {</span>\n   const [savedColors, setSavedColors] = useState(saved);\n\n   return (\n<span class=\"hljs-meta\">@@ -29,6 +30,9 @@</span> const SavedColors = ({ hexColor }: SavedColorsProps) =&gt; {\n             key={id}\n             name={name}\n             hexColor={hexColor}\n<span class=\"hljs-addition\">+            onClick={() =&gt;</span>\n<span class=\"hljs-addition\">+              dispatch({ type: &#x27;update-hex-color&#x27;, payload: { hexColor } })</span>\n<span class=\"hljs-addition\">+            }</span>\n             onRemove={() =&gt;\n               setSavedColors((colors) =&gt;\n                 colors.filter((color) =&gt; color.id !== id),\n</code></pre>\n","markdown":"# **Typing Actions with Reducers Solution**\n\n<br>\n\nAlright, let's get one of those `ColorChangeSwatches` wired up to our state management. We've already got the action in place from earlier, so that's nice.\n\nLet's go for those saved colors that don't really save. (They're hard-coded.)\n\nwe're get ready for our `dispatch` prop in `src/components/saved-colors/index.tsx`:\n\nIn `src/components/application.tsx`:\n\n```diff\n@@ -22,7 +22,7 @@ const Application = () => {\n       />\n       <AdjustColors hexColor={hexColor} dispatch={dispatch} />\n       <RelatedColors hexColor={hexColor} />\n-      <SavedColors hexColor={hexColor} />\n+      <SavedColors hexColor={hexColor} dispatch={dispatch} />\n     </div>\n   );\n };\n```\n\n```diff\n@@ -1,10 +1,11 @@\n-import { useState } from 'react';\n+import { Dispatch, useState } from 'react';\n import id from 'lodash.uniqueid';\n import AddSavedColor from './add-saved-color';\n import SavedColor from './saved-color';\n\n type SavedColorsProps = {\n   hexColor: string;\n+  dispatch: Dispatch<ColorActions>;\n };\n\n const saved = [\n@@ -12,7 +13,7 @@ const saved = [\n   { id: id(), name: 'Blue Fire', hexColor: '#00aadd' },\n ];\n\n-const SavedColors = ({ hexColor }: SavedColorsProps) => {\n+const SavedColors = ({ hexColor, dispatch }: SavedColorsProps) => {\n   const [savedColors, setSavedColors] = useState(saved);\n\n   return (\n@@ -29,6 +30,9 @@ const SavedColors = ({ hexColor }: SavedColorsProps) => {\n             key={id}\n             name={name}\n             hexColor={hexColor}\n+            onClick={() =>\n+              dispatch({ type: 'update-hex-color', payload: { hexColor } })\n+            }\n             onRemove={() =>\n               setSavedColors((colors) =>\n                 colors.filter((color) => color.id !== id),\n```\n","slug":"Typing-action-and-reducers-solution","title":"Typing Action and Reducers Solution","section":"Reducers","icon":"recycle","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/06-Reducers/D-Typing-action-and-reducers-solution.md","nextSlug":"/React-with-TypeScript/lessons/context-api/the-context-api","prevSlug":"/React-with-TypeScript/lessons/Reducers/Typing-action-and-reducers"}},"__N_SSG":true}