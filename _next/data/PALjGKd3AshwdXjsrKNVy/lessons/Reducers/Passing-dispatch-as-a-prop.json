{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"passing-dispatch-as-a-prop\"><strong>Passing Dispatch as a prop</strong></h1>\n<br>\n<!--\nAlright, let's start with a new application that allows us to [pick and save colors](https://github.com/stevekinney/colors). I'll start us off and then you'll take it from there for a bit. -->\n\n<p>Right now there is a fair bit of prop drilling and not all of the functionality works just yet. You can select a new color from the color input, but you can&#39;t adjust it from anywhere else.</p>\n<!-- My sense is that this would be easier with a reducer and maybe eventually [the Context API](Using%20state%20management%20and%20the%20Context%20API). -->\n\n<p>Let&#39;s start by refactoring the application to use a reducer. I&#39;m going to put mine in <code>lib/reducer.ts</code>, but you can do whatever feels best for you at this time in your life.</p>\n<h2 id=\"starting-with-some-actions\">Starting with some actions</h2>\n<p>I know at least two of the actions that I&#39;m going to want, so I am going to go ahead and make them now.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">UpdateHexColorAction</span> = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;update-hex-color&quot;</span>;\n  <span class=\"hljs-attr\">payload</span>: {\n    <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n  };\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">UpdateRGBColorAction</span> = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;update-rgb-color&quot;</span>;\n  <span class=\"hljs-attr\">payload</span>: { <span class=\"hljs-attr\">rgb</span>: [<span class=\"hljs-attr\">r</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span>] };\n};\n</code></pre>\n<p>My state is also pretty simple. I could—and maybe <em>should</em> add the list of saved colors, but for now let&#39;s start simple as pretty much everything revolves around the <code>hexColor</code> that I have in the top level of my applicastion state.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ColorState</span> = {\n  <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">initialState</span>: <span class=\"hljs-title class_\">ColorState</span> = {\n  <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-string\">&quot;#ff7799&quot;</span>,\n};\n</code></pre>\n<p>And with that, I think I am ready to make my reducer.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">colorReducer</span> = (<span class=\"hljs-params\">\n  state: ColorState,\n  action: UpdateHexColorAction | UpdateRGBColorAction\n</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (action.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&quot;update-hex-color&quot;</span>) {\n    <span class=\"hljs-keyword\">const</span> { hexColor } = action.<span class=\"hljs-property\">payload</span>;\n    <span class=\"hljs-keyword\">return</span> { ...state, hexColor };\n  }\n\n  <span class=\"hljs-keyword\">if</span> (action.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&quot;update-rgb-color&quot;</span>) {\n    <span class=\"hljs-keyword\">const</span> hexColor = rgb.<span class=\"hljs-title function_\">hex</span>(action.<span class=\"hljs-property\">payload</span>.<span class=\"hljs-property\">rgb</span>);\n    <span class=\"hljs-keyword\">return</span> { ...state, hexColor };\n  }\n\n  <span class=\"hljs-keyword\">return</span> state;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> colorReducer;\n</code></pre>\n<h2 id=\"hooking-up-the-reducer\">Hooking up the reducer</h2>\n<p>Alright, we&#39;re ready to hook this thing up.</p>\n<p>Let&#39;s switch from <code>useState</code> to <code>useReducer</code> in <code>src/components/application.tsx</code>.</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -1,17 +1,24 @@</span>\n<span class=\"hljs-deletion\">-import { useState } from &#x27;react&#x27;;</span>\n<span class=\"hljs-addition\">+import { useReducer } from &#x27;react&#x27;;</span>\n import SavedColors from &#x27;./saved-colors&#x27;;\n import RelatedColors from &#x27;./related-colors&#x27;;\n import AdjustColors from &#x27;./adjust-colors&#x27;;\n import ColorPicker from &#x27;./color-picker&#x27;;\n<span class=\"hljs-addition\">+import colorReducer, { initialState } from &#x27;../lib/color-reducer&#x27;;</span>\n\n const Application = () =&gt; {\n<span class=\"hljs-deletion\">-  const [hexColor, setHexColor] = useState(&#x27;#e56e24&#x27;);</span>\n<span class=\"hljs-addition\">+  const [state, dispatch] = useReducer(colorReducer, initialState);</span>\n<span class=\"hljs-addition\">+  const hexColor = state.hexColor;</span>\n\n   return (\n     &lt;div className=&quot;grid max-w-3xl grid-cols-1 gap-8 p-8 pb-40 mx-auto dark:bg-slate-900 dark:text-white sm:grid-cols-2&quot;&gt;\n       &lt;ColorPicker\n         hexColor={hexColor}\n<span class=\"hljs-deletion\">-        onChange={(e) =&gt; setHexColor(e.target.value)}</span>\n<span class=\"hljs-addition\">+        onChange={(e) =&gt;</span>\n<span class=\"hljs-addition\">+          dispatch({</span>\n<span class=\"hljs-addition\">+            type: &#x27;update-hex-color&#x27;,</span>\n<span class=\"hljs-addition\">+            payload: { hexColor: e.target.value },</span>\n<span class=\"hljs-addition\">+          })</span>\n<span class=\"hljs-addition\">+        }</span>\n       /&gt;\n       &lt;AdjustColors hexColor={hexColor} /&gt;\n       &lt;RelatedColors hexColor={hexColor} /&gt;\n</code></pre>\n<p>We can verify that everything works as expected.</p>\n<h2 id=\"adjust-the-color-by-the-rgb-value\">Adjust the color by the RGB value</h2>\n<p>This is where we&#39;re going to hit another areas that we&#39;ll want to circle back and improve. But, let&#39;s try to figure it out first.</p>\n<p>We can see that <code>dispatch</code> has the following type:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&lt;<span class=\"hljs-title class_\">UpdateHexColorAction</span> | <span class=\"hljs-title class_\">UpdateRGBColorAction</span>&gt;;\n</code></pre>\n<p>That&#39;s a union of all of our actions. Let&#39;s actually store that type somewhere so that we can get access to it.</p>\n<p>Let&#39;s create <code>lib/color-state.d.ts</code>, and we&#39;ll move our types in there.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">UpdateHexColorAction</span> = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;update-hex-color&quot;</span>;\n  <span class=\"hljs-attr\">payload</span>: {\n    <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n  };\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">UpdateRGBColorAction</span> = {\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;update-rgb-color&quot;</span>;\n  <span class=\"hljs-attr\">payload</span>: { <span class=\"hljs-attr\">rgb</span>: [<span class=\"hljs-attr\">r</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">g</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span>] };\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ColorState</span> = {\n  <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">ColorActions</span> = <span class=\"hljs-title class_\">UpdateHexColorAction</span> | <span class=\"hljs-title class_\">UpdateRGBColorAction</span>;\n</code></pre>\n<p>We&#39;ll update our reducer to use that new <code>ColorActions</code> type we just made.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">colorReducer</span> = (<span class=\"hljs-params\">\n  state: ColorState = initialState,\n  action: ColorActions\n</span>) =&gt; {\n  <span class=\"hljs-comment\">// …</span>\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> colorReducer;\n</code></pre>\n<p>Now, if we look at <code>dispatch</code>, it&#39;s a lot easier to wrap our heads around:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&lt;<span class=\"hljs-title class_\">ColorActions</span>&gt;;\n</code></pre>\n<h2 id=\"typing-and-passing-dispatch-through-as-a-prop\">Typing and passing <code>dispatch</code> through as a prop</h2>\n<p>We can now reference <code>dispatch</code>&#39;s type super easily. Let&#39;s look at <code>src/components/adjust-colors/index.ts</code>:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">AdjustColorsProps</span> = {\n  <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-title class_\">Dispatch</span>&lt;<span class=\"hljs-title class_\">ColorActions</span>&gt;;\n};\n</code></pre>\n<p>I&#39;ll go ahead and do the same for <code>HexToRGB</code>.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">HexToRGBProps</span> = {\n  <span class=\"hljs-attr\">hexColor</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">dispatch</span>: <span class=\"hljs-title class_\">Dispatch</span>&lt;<span class=\"hljs-title class_\">ColorActions</span>&gt;;\n};\n</code></pre>\n<p>There is definitely an opportunity to make some of these types more reusable, but we&#39;ll put that off for a bit. Let&#39;s thread <code>dispatch</code> from <code>Application</code> through <code>AdjustColor</code> to <code>HexToRGB</code>.</p>\n<p>In <code>src/components/application.tsx</code>:</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -20,7 +20,7 @@</span> const Application = () =&gt; {\n           })\n         }\n       /&gt;\n<span class=\"hljs-deletion\">-      &lt;AdjustColors hexColor={hexColor} /&gt;</span>\n<span class=\"hljs-addition\">+      &lt;AdjustColors hexColor={hexColor} dispatch={dispatch} /&gt;</span>\n       &lt;RelatedColors hexColor={hexColor} /&gt;\n       &lt;SavedColors hexColor={hexColor} /&gt;\n     &lt;/div&gt;\n</code></pre>\n<p>In <code>src/components/adjust-colors/</code>:</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -10,11 +10,11 @@</span> type AdjustColorsProps = {\n   dispatch: Dispatch&lt;ColorActions&gt;;\n };\n\n<span class=\"hljs-deletion\">-const AdjustColors = ({ hexColor }: AdjustColorsProps) =&gt; {</span>\n<span class=\"hljs-addition\">+const AdjustColors = ({ hexColor, dispatch }: AdjustColorsProps) =&gt; {</span>\n   return (\n     &lt;div className=&quot;flex flex-col w-full gap-4&quot;&gt;\n       &lt;h3&gt;Adjust Colors&lt;/h3&gt;\n<span class=\"hljs-deletion\">-      &lt;HexToRGB hexColor={hexColor} /&gt;</span>\n<span class=\"hljs-addition\">+      &lt;HexToRGB hexColor={hexColor} dispatch={dispatch} /&gt;</span>\n       &lt;HexToHSL hexColor={hexColor} /&gt;\n       &lt;HexToHSV hexColor={hexColor} /&gt;\n       &lt;HexToCMYK hexColor={hexColor} /&gt;\n</code></pre>\n<p>And finally, in <code>src/components/adjust-colors/to-rgb.tsx</code>:</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -7,7 +7,7 @@</span> type HexToRGBProps = {\n   dispatch: Dispatch&lt;ColorActions&gt;;\n };\n\n<span class=\"hljs-deletion\">-const HexToRGB = ({ hexColor }: HexToRGBProps) =&gt; {</span>\n<span class=\"hljs-addition\">+const HexToRGB = ({ hexColor, dispatch }: HexToRGBProps) =&gt; {</span>\n   const color = hex.cmyk(hexColor);\n   const [r, g, b] = color;\n</code></pre>\n<h2 id=\"firing-an-action-when-the-rgb-values-change\">Firing an action when the RGB values change</h2>\n<p>We&#39;ve got some more optimization to do, but we&#39;ll revisit this later. Our mission right now is to dispatch that action with the newest RGB values.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">HexToRGB</span> = (<span class=\"hljs-params\">{ hexColor, dispatch }: HexToRGBProps</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> color = hex.<span class=\"hljs-title function_\">rgb</span>(hexColor);\n  <span class=\"hljs-keyword\">const</span> [r, g, b] = color;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">updateRGB</span> = (<span class=\"hljs-params\">{ red = r, green = g, blue = b }</span>) =&gt; {\n    <span class=\"hljs-title function_\">dispatch</span>({\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;update-rgb-color&quot;</span>,\n      <span class=\"hljs-attr\">payload</span>: { <span class=\"hljs-attr\">rgb</span>: [red, green, blue] },\n    });\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;grid w-full grid-flow-col gap-2&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LabeledInput</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;R&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{r}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> updateRGB({ red: +e.target.value })}\n      /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LabeledInput</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;G&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{g}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> updateRGB({ green: +e.target.value })}\n      /&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LabeledInput</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;B&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{b}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> updateRGB({ blue: +e.target.value })}\n      /&gt;\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">HexToRGB</span>;\n</code></pre>\n","markdown":"# **Passing Dispatch as a prop**\n\n<br>\n<!--\nAlright, let's start with a new application that allows us to [pick and save colors](https://github.com/stevekinney/colors). I'll start us off and then you'll take it from there for a bit. -->\n\nRight now there is a fair bit of prop drilling and not all of the functionality works just yet. You can select a new color from the color input, but you can't adjust it from anywhere else.\n\n<!-- My sense is that this would be easier with a reducer and maybe eventually [the Context API](Using%20state%20management%20and%20the%20Context%20API). -->\n\nLet's start by refactoring the application to use a reducer. I'm going to put mine in `lib/reducer.ts`, but you can do whatever feels best for you at this time in your life.\n\n## Starting with some actions\n\nI know at least two of the actions that I'm going to want, so I am going to go ahead and make them now.\n\n```ts\ntype UpdateHexColorAction = {\n  type: \"update-hex-color\";\n  payload: {\n    hexColor: string;\n  };\n};\n\ntype UpdateRGBColorAction = {\n  type: \"update-rgb-color\";\n  payload: { rgb: [r: number, g: number, b: number] };\n};\n```\n\nMy state is also pretty simple. I could—and maybe _should_ add the list of saved colors, but for now let's start simple as pretty much everything revolves around the `hexColor` that I have in the top level of my applicastion state.\n\n```ts\ntype ColorState = {\n  hexColor: string;\n};\n\nexport const initialState: ColorState = {\n  hexColor: \"#ff7799\",\n};\n```\n\nAnd with that, I think I am ready to make my reducer.\n\n```ts\nconst colorReducer = (\n  state: ColorState,\n  action: UpdateHexColorAction | UpdateRGBColorAction\n) => {\n  if (action.type === \"update-hex-color\") {\n    const { hexColor } = action.payload;\n    return { ...state, hexColor };\n  }\n\n  if (action.type === \"update-rgb-color\") {\n    const hexColor = rgb.hex(action.payload.rgb);\n    return { ...state, hexColor };\n  }\n\n  return state;\n};\n\nexport default colorReducer;\n```\n\n## Hooking up the reducer\n\nAlright, we're ready to hook this thing up.\n\nLet's switch from `useState` to `useReducer` in `src/components/application.tsx`.\n\n```diff\n@@ -1,17 +1,24 @@\n-import { useState } from 'react';\n+import { useReducer } from 'react';\n import SavedColors from './saved-colors';\n import RelatedColors from './related-colors';\n import AdjustColors from './adjust-colors';\n import ColorPicker from './color-picker';\n+import colorReducer, { initialState } from '../lib/color-reducer';\n\n const Application = () => {\n-  const [hexColor, setHexColor] = useState('#e56e24');\n+  const [state, dispatch] = useReducer(colorReducer, initialState);\n+  const hexColor = state.hexColor;\n\n   return (\n     <div className=\"grid max-w-3xl grid-cols-1 gap-8 p-8 pb-40 mx-auto dark:bg-slate-900 dark:text-white sm:grid-cols-2\">\n       <ColorPicker\n         hexColor={hexColor}\n-        onChange={(e) => setHexColor(e.target.value)}\n+        onChange={(e) =>\n+          dispatch({\n+            type: 'update-hex-color',\n+            payload: { hexColor: e.target.value },\n+          })\n+        }\n       />\n       <AdjustColors hexColor={hexColor} />\n       <RelatedColors hexColor={hexColor} />\n\n```\n\nWe can verify that everything works as expected.\n\n## Adjust the color by the RGB value\n\nThis is where we're going to hit another areas that we'll want to circle back and improve. But, let's try to figure it out first.\n\nWe can see that `dispatch` has the following type:\n\n```ts\nconst dispatch: React.Dispatch<UpdateHexColorAction | UpdateRGBColorAction>;\n```\n\nThat's a union of all of our actions. Let's actually store that type somewhere so that we can get access to it.\n\nLet's create `lib/color-state.d.ts`, and we'll move our types in there.\n\n```ts\ntype UpdateHexColorAction = {\n  type: \"update-hex-color\";\n  payload: {\n    hexColor: string;\n  };\n};\n\ntype UpdateRGBColorAction = {\n  type: \"update-rgb-color\";\n  payload: { rgb: [r: number, g: number, b: number] };\n};\n\ntype ColorState = {\n  hexColor: string;\n};\n\ntype ColorActions = UpdateHexColorAction | UpdateRGBColorAction;\n```\n\nWe'll update our reducer to use that new `ColorActions` type we just made.\n\n```ts\nconst colorReducer = (\n  state: ColorState = initialState,\n  action: ColorActions\n) => {\n  // …\n};\n\nexport default colorReducer;\n```\n\nNow, if we look at `dispatch`, it's a lot easier to wrap our heads around:\n\n```ts\nconst dispatch: React.Dispatch<ColorActions>;\n```\n\n## Typing and passing `dispatch` through as a prop\n\nWe can now reference `dispatch`'s type super easily. Let's look at `src/components/adjust-colors/index.ts`:\n\n```tsx\ntype AdjustColorsProps = {\n  hexColor: string;\n  dispatch: Dispatch<ColorActions>;\n};\n```\n\nI'll go ahead and do the same for `HexToRGB`.\n\n```tsx\ntype HexToRGBProps = {\n  hexColor: string;\n  dispatch: Dispatch<ColorActions>;\n};\n```\n\nThere is definitely an opportunity to make some of these types more reusable, but we'll put that off for a bit. Let's thread `dispatch` from `Application` through `AdjustColor` to `HexToRGB`.\n\nIn `src/components/application.tsx`:\n\n```diff\n@@ -20,7 +20,7 @@ const Application = () => {\n           })\n         }\n       />\n-      <AdjustColors hexColor={hexColor} />\n+      <AdjustColors hexColor={hexColor} dispatch={dispatch} />\n       <RelatedColors hexColor={hexColor} />\n       <SavedColors hexColor={hexColor} />\n     </div>\n```\n\nIn `src/components/adjust-colors/`:\n\n```diff\n@@ -10,11 +10,11 @@ type AdjustColorsProps = {\n   dispatch: Dispatch<ColorActions>;\n };\n\n-const AdjustColors = ({ hexColor }: AdjustColorsProps) => {\n+const AdjustColors = ({ hexColor, dispatch }: AdjustColorsProps) => {\n   return (\n     <div className=\"flex flex-col w-full gap-4\">\n       <h3>Adjust Colors</h3>\n-      <HexToRGB hexColor={hexColor} />\n+      <HexToRGB hexColor={hexColor} dispatch={dispatch} />\n       <HexToHSL hexColor={hexColor} />\n       <HexToHSV hexColor={hexColor} />\n       <HexToCMYK hexColor={hexColor} />\n```\n\nAnd finally, in `src/components/adjust-colors/to-rgb.tsx`:\n\n```diff\n@@ -7,7 +7,7 @@ type HexToRGBProps = {\n   dispatch: Dispatch<ColorActions>;\n };\n\n-const HexToRGB = ({ hexColor }: HexToRGBProps) => {\n+const HexToRGB = ({ hexColor, dispatch }: HexToRGBProps) => {\n   const color = hex.cmyk(hexColor);\n   const [r, g, b] = color;\n```\n\n## Firing an action when the RGB values change\n\nWe've got some more optimization to do, but we'll revisit this later. Our mission right now is to dispatch that action with the newest RGB values.\n\n```ts\nconst HexToRGB = ({ hexColor, dispatch }: HexToRGBProps) => {\n  const color = hex.rgb(hexColor);\n  const [r, g, b] = color;\n\n  const updateRGB = ({ red = r, green = g, blue = b }) => {\n    dispatch({\n      type: \"update-rgb-color\",\n      payload: { rgb: [red, green, blue] },\n    });\n  };\n\n  return (\n    <section className=\"grid w-full grid-flow-col gap-2\">\n      <LabeledInput\n        label=\"R\"\n        type=\"number\"\n        value={r}\n        onChange={(e) => updateRGB({ red: +e.target.value })}\n      />\n      <LabeledInput\n        label=\"G\"\n        type=\"number\"\n        value={g}\n        onChange={(e) => updateRGB({ green: +e.target.value })}\n      />\n      <LabeledInput\n        label=\"B\"\n        type=\"number\"\n        value={b}\n        onChange={(e) => updateRGB({ blue: +e.target.value })}\n      />\n    </section>\n  );\n};\n\nexport default HexToRGB;\n```\n","slug":"Passing-dispatch-as-a-prop","title":"Passing Dispatch as a Prop","section":"Reducers","icon":"recycle","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/06-Reducers/B-Passing-dispatch-as-a-prop.md","nextSlug":"/React-with-TypeScript/lessons/Reducers/Typing-action-and-reducers","prevSlug":"/React-with-TypeScript/lessons/Reducers/working-with-reducers"}},"__N_SSG":true}