{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"passing-setstate-and-reusing-state\"><strong>Passing setState and reusing State</strong></h1>\n<br>\n\n<p>Alright, it&#39;s that time again. I added some filters, but there are some new complexities that you need to deal with. Let&#39;s take a look at the filter.tsx</p>\n<pre><code class=\"language-ts\">type QuoteFilterProps = {\n  filters: QuoteFilters;\n  setFilters: any; // Change me!\n};\n</code></pre>\n<p>Also, I don&#39;t love that I had to define the same event handler twice in the JSX output.</p>\n<pre><code class=\"language-ts\">const QuoteFilter = ({ filters, setFilters }: QuoteFilterProps) =&gt; {\n  return (\n    &lt;section className=&quot;flex gap-4&quot;&gt;\n      &lt;label htmlFor=&quot;content-filter&quot;&gt;\n        Filter by quote content\n        &lt;input\n          {/* */}\n          onChange={(e) =&gt;\n            setFilters((filters: any /* Ugh. */) =&gt; ({\n              ...filters,\n              [e.target.name]: e.target.value,\n            }))\n          }\n          // ðŸ‘† This feels like duplicate code.\n          placeholder=&quot;Filter by quote content&quot;\n        /&gt;\n      &lt;/label&gt;\n      &lt;label htmlFor=&quot;source-filter&quot;&gt;\n        Filter by source\n        {/* */}\n          onChange={(e) =&gt;\n            setFilters((filters: any /* Ugh. */) =&gt; ({\n              ...filters,\n              [e.target.name]: e.target.value,\n            }))\n          }\n          // ðŸ‘† This feels like duplicate code.\n          placeholder=&quot;Filter by source&quot;\n        /&gt;\n      &lt;/label&gt;\n    &lt;/section&gt;\n  );\n};\n</code></pre>\n","markdown":"# **Passing setState and reusing State**\n\n<br>\n\nAlright, it's that time again. I added some filters, but there are some new complexities that you need to deal with. Let's take a look at the filter.tsx\n\n```ts\ntype QuoteFilterProps = {\n  filters: QuoteFilters;\n  setFilters: any; // Change me!\n};\n```\n\nAlso, I don't love that I had to define the same event handler twice in the JSX output.\n\n```ts\nconst QuoteFilter = ({ filters, setFilters }: QuoteFilterProps) => {\n  return (\n    <section className=\"flex gap-4\">\n      <label htmlFor=\"content-filter\">\n        Filter by quote content\n        <input\n          {/* */}\n          onChange={(e) =>\n            setFilters((filters: any /* Ugh. */) => ({\n              ...filters,\n              [e.target.name]: e.target.value,\n            }))\n          }\n          // ðŸ‘† This feels like duplicate code.\n          placeholder=\"Filter by quote content\"\n        />\n      </label>\n      <label htmlFor=\"source-filter\">\n        Filter by source\n        {/* */}\n          onChange={(e) =>\n            setFilters((filters: any /* Ugh. */) => ({\n              ...filters,\n              [e.target.name]: e.target.value,\n            }))\n          }\n          // ðŸ‘† This feels like duplicate code.\n          placeholder=\"Filter by source\"\n        />\n      </label>\n    </section>\n  );\n};\n```\n","slug":"passing-setState-and-reusing-state","title":"Passing setState and Reusing State","section":"Hooks","icon":"hammer","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/05-hooks/G-passing-setState-and-reusing-state.md","nextSlug":"/React-with-TypeScript/lessons/hooks/passing-setState-and-resuing-state-solution","prevSlug":"/React-with-TypeScript/lessons/hooks/state-and-event-solution"}},"__N_SSG":true}