{"pageProps":{"post":{"attributes":{},"html":"<h2 id=\"setting-state-without-default-value\"><strong>Setting State without default value</strong></h2>\n<br>\n\n<p>Things can get a little tricky when we don&#39;t have a default value to start out with. TypeScript can&#39;t help up out and make any assumptions on our behalf. Let&#39;s consider this code for a moment.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Quotes</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./quotes&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">InspirationalQuote</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./quote&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Loading</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./loading&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Quote</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>;\n  source?: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchRandomQuote</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/quotes/random`</span>);\n  <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>();\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchQuotes</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">count: <span class=\"hljs-built_in\">number</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">`/api/quotes?limit=<span class=\"hljs-subst\">${count}</span>`</span>);\n  <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>();\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Application</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [quote, setQuote] = <span class=\"hljs-title function_\">useState</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">fetchRandomQuote</span>().<span class=\"hljs-title function_\">then</span>(setQuote);\n  }, []);\n\n  <span class=\"hljs-keyword\">if</span> (!quote) <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loading</span> /&gt;</span></span>;\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;w-full max-w-2xl py-16 mx-auto&quot;</span>&gt;</span>\n      {/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">InspirationalQuote</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">{quote.content}</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{quote.source}</span> /&gt;</span> */}\n      {/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Quotes</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;grid grid-cols-2 gap-4&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Quotes</span>&gt;</span> */}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Application</span>;\n</code></pre>\n<p>It doesn&#39;t even matter what the <code>InspirationalQuote</code> is just yet or what properties it takes.</p>\n<p>Look at this:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> [quote, useQuote] = <span class=\"hljs-title function_\">useState</span>();\n</code></pre>\n<p>The type is inferred as:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">quote</span>: <span class=\"hljs-literal\">undefined</span>;\n</code></pre>\n<p>Well, we&#39;re passing <code>undefined</code> to <code>useState</code>. If TypeScript was smart enough to assume that the number we passed to the <code>useState</code> in our counter example meant that <code>count</code> was a number, then the logic follows that <code>quote</code> is of the type <code>undefined.</code></p>\n<h2 id=\"solving-the-problem\">Solving the problem</h2>\n<p>Okay, so enough complaining—what are we going to do about it?</p>\n<h3 id=\"using-an-empty-value\">Using an empty value</h3>\n<p>So, what do we do? We have a few options:</p>\n<p>We could give it an empty value (e.g. <code>{ content: &#39;&#39;, source: &#39;&#39; }</code>);</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> [quote, setQuote] = <span class=\"hljs-title function_\">useState</span>({ <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">&quot;&quot;</span> });\n</code></pre>\n<p>This works, but it has two problems:</p>\n<ul>\n<li>We broke our loading functionality since <code>!quote</code> will never be a case.</li>\n<li>It&#39;s not totally clear to TypeScript that <code>source</code> is optional.</li>\n</ul>\n<h3 id=\"providing-a-type-variable\">Providing a type variable</h3>\n<p>We could also step in and help TypeScript out a bit by providing a type variable. If you hover over <code>useState</code> you&#39;ll see something that starts with:</p>\n<pre><code class=\"hljs language-ts\">useState&lt;{\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">source</span>: <span class=\"hljs-built_in\">string</span>;\n}&gt;;\n</code></pre>\n<p>Well, we can step in and provide that service for TypeScript.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> [quote, setQuote] = useState&lt;<span class=\"hljs-title class_\">Quote</span> | <span class=\"hljs-literal\">undefined</span>&gt;();\n</code></pre>\n","markdown":"## **Setting State without default value**\n\n<br>\n\nThings can get a little tricky when we don't have a default value to start out with. TypeScript can't help up out and make any assumptions on our behalf. Let's consider this code for a moment.\n\n```ts\nimport { useEffect, useState } from \"react\";\nimport Quotes from \"./quotes\";\nimport InspirationalQuote from \"./quote\";\nimport Loading from \"./loading\";\n\nexport type Quote = {\n  id: number;\n  content: string;\n  source?: string;\n};\n\nexport const fetchRandomQuote = async () => {\n  const response = await fetch(`/api/quotes/random`);\n  return response.json();\n};\n\nexport const fetchQuotes = async (count: number) => {\n  const response = await fetch(`/api/quotes?limit=${count}`);\n  return response.json();\n};\n\nconst Application = () => {\n  const [quote, setQuote] = useState();\n\n  useEffect(() => {\n    fetchRandomQuote().then(setQuote);\n  }, []);\n\n  if (!quote) return <Loading />;\n  return (\n    <main className=\"w-full max-w-2xl py-16 mx-auto\">\n      {/* <InspirationalQuote content={quote.content} source={quote.source} /> */}\n      {/* <Quotes>\n        <div className=\"grid grid-cols-2 gap-4\"></div>\n      </Quotes> */}\n    </main>\n  );\n};\n\nexport default Application;\n```\n\nIt doesn't even matter what the `InspirationalQuote` is just yet or what properties it takes.\n\nLook at this:\n\n```ts\nconst [quote, useQuote] = useState();\n```\n\nThe type is inferred as:\n\n```ts\nconst quote: undefined;\n```\n\nWell, we're passing `undefined` to `useState`. If TypeScript was smart enough to assume that the number we passed to the `useState` in our counter example meant that `count` was a number, then the logic follows that `quote` is of the type `undefined.`\n\n## Solving the problem\n\nOkay, so enough complaining—what are we going to do about it?\n\n### Using an empty value\n\nSo, what do we do? We have a few options:\n\nWe could give it an empty value (e.g. `{ content: '', source: '' }`);\n\n```ts\nconst [quote, setQuote] = useState({ content: \"\", source: \"\" });\n```\n\nThis works, but it has two problems:\n\n- We broke our loading functionality since `!quote` will never be a case.\n- It's not totally clear to TypeScript that `source` is optional.\n\n### Providing a type variable\n\nWe could also step in and help TypeScript out a bit by providing a type variable. If you hover over `useState` you'll see something that starts with:\n\n```ts\nuseState<{\n  content: string;\n  source: string;\n}>;\n```\n\nWell, we can step in and provide that service for TypeScript.\n\n```ts\nconst [quote, setQuote] = useState<Quote | undefined>();\n```\n","slug":"setting-State-without-default-value","title":"Setting State without Default Value","section":"Hooks","icon":"hammer","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/05-hooks/D-setting-State-without-default-value.md","nextSlug":"/React-with-TypeScript/lessons/hooks/state-and-event-exercise","prevSlug":"/React-with-TypeScript/lessons/hooks/useState-Solution"}},"__N_SSG":true}