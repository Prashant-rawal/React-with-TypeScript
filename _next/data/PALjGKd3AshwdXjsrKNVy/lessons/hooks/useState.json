{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"adding-state-to-counter\"><strong>Adding State to Counter</strong></h1>\n<br>\n\n<p>Let&#39;s quickly add some state to a simple little counter. For starters, this is basically the entire implementation.</p>\n<p><a href=\"https://codesandbox.io/p/github/Prashant-rawal/accident-counter/main?file=%2Fsrc%2Fcomponents%2Fcounter.tsx%3A8%2C34&workspaceId=061a889c-7559-4eab-958f-5fa3d531165c\">you can follow along with me here</a></p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Counter</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;flex flex-col items-center w-2/3 gap-8 p-8 bg-white border-4 shadow-lg border-primary-500&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Days Since the Last Accident<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-6xl&quot;</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;flex gap-2&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>➖ Decrement<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>🔁 Reset<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>➕ Increment<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> e.preventDefault()}&gt;\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{0}</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Update Counter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Counter</span>;\n</code></pre>\n<p>This is nothing particularly special to see here. Adding some state can be done swiftly using the <code>useState</code> hook.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n</code></pre>\n<p>And then—yea—we&#39;ll add some state to our counter, just like every other modern React tutorial you&#39;ve ever seen.</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-meta\">@@ -1,12 +1,16 @@</span>\n<span class=\"hljs-addition\">+import { useState } from &#x27;react&#x27;;</span>\n<span class=\"hljs-addition\">+</span>\n const Counter = () =&gt; {\n<span class=\"hljs-addition\">+  const [count, setCount] = useState(0);</span>\n<span class=\"hljs-addition\">+</span>\n   return (\n     &lt;section className=&quot;flex flex-col items-center w-2/3 gap-8 p-8 bg-white border-4 shadow-lg border-primary-500&quot;&gt;\n       &lt;h1&gt;Days Since the Last Accident&lt;/h1&gt;\n<span class=\"hljs-deletion\">-      &lt;p className=&quot;text-6xl&quot;&gt;0&lt;/p&gt;</span>\n<span class=\"hljs-addition\">+      &lt;p className=&quot;text-6xl&quot;&gt;{count}&lt;/p&gt;</span>\n       &lt;div className=&quot;flex gap-2&quot;&gt;\n<span class=\"hljs-deletion\">-        &lt;button&gt;➖ Decrement&lt;/button&gt;</span>\n<span class=\"hljs-deletion\">-        &lt;button&gt;🔁 Reset&lt;/button&gt;</span>\n<span class=\"hljs-deletion\">-        &lt;button&gt;➕ Increment&lt;/button&gt;</span>\n<span class=\"hljs-addition\">+        &lt;button onClick={() =&gt; setCount(count - 1)}&gt;➖ Decrement&lt;/button&gt;</span>\n<span class=\"hljs-addition\">+        &lt;button onClick={() =&gt; setCount(0)}&gt;🔁 Reset&lt;/button&gt;</span>\n<span class=\"hljs-addition\">+        &lt;button onClick={() =&gt; setCount(count + 1)}&gt;➕ Increment&lt;/button&gt;</span>\n       &lt;/div&gt;\n       &lt;div&gt;\n         &lt;form onSubmit={(e) =&gt; e.preventDefault()}&gt;\n</code></pre>\n<p>We&#39;ll worry about the form in a hot minute.</p>\n<h2 id=\"taking-a-look-at-what-typescript-has-figured-out-for-us\">Taking a look at what TypeScript has figured out for us</h2>\n<p>So, this is where it gets kind of cool. This file doesn&#39;t look like TypeScript, but it <em>is</em>.</p>\n<p>If you hover over <code>count</code>, you&#39;ll see that TypeScript was about to deduce that it&#39;s a number because you set its initial value to a number.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<p>You can also see that it figured out that <code>setCount</code> should <em>only</em> take a number, which means that <code>count</code> will <em>always</em> be a number.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">setCount</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&lt;<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">SetStateAction</span>&lt;<span class=\"hljs-built_in\">number</span>&gt;&gt;;\n</code></pre>\n<p>Don&#39;t worry about all of that ceremony. <code>useState</code> is an abstraction over <code>useReducer</code>, which works by dispatching actions.</p>\n<p>If we try to break the rules, you&#39;ll see that TypeScript keeps us honest.</p>\n<p>This is <em>particulary</em> helpful when dealing with one of my least favorite parts of the browser: the fact that number inputs store their values as strings. 🙄</p>\n","markdown":"# **Adding State to Counter**\n\n<br>\n\nLet's quickly add some state to a simple little counter. For starters, this is basically the entire implementation.\n\n[you can follow along with me here](https://codesandbox.io/p/github/Prashant-rawal/accident-counter/main?file=%2Fsrc%2Fcomponents%2Fcounter.tsx%3A8%2C34&workspaceId=061a889c-7559-4eab-958f-5fa3d531165c)\n\n```tsx\nconst Counter = () => {\n  return (\n    <section className=\"flex flex-col items-center w-2/3 gap-8 p-8 bg-white border-4 shadow-lg border-primary-500\">\n      <h1>Days Since the Last Accident</h1>\n      <p className=\"text-6xl\">0</p>\n      <div className=\"flex gap-2\">\n        <button>➖ Decrement</button>\n        <button>🔁 Reset</button>\n        <button>➕ Increment</button>\n      </div>\n      <div>\n        <form onSubmit={(e) => e.preventDefault()}>\n          <input type=\"number\" value={0} />\n          <button type=\"submit\">Update Counter</button>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default Counter;\n```\n\nThis is nothing particularly special to see here. Adding some state can be done swiftly using the `useState` hook.\n\n```tsx\nconst [count, setCount] = useState(0);\n```\n\nAnd then—yea—we'll add some state to our counter, just like every other modern React tutorial you've ever seen.\n\n```diff\n@@ -1,12 +1,16 @@\n+import { useState } from 'react';\n+\n const Counter = () => {\n+  const [count, setCount] = useState(0);\n+\n   return (\n     <section className=\"flex flex-col items-center w-2/3 gap-8 p-8 bg-white border-4 shadow-lg border-primary-500\">\n       <h1>Days Since the Last Accident</h1>\n-      <p className=\"text-6xl\">0</p>\n+      <p className=\"text-6xl\">{count}</p>\n       <div className=\"flex gap-2\">\n-        <button>➖ Decrement</button>\n-        <button>🔁 Reset</button>\n-        <button>➕ Increment</button>\n+        <button onClick={() => setCount(count - 1)}>➖ Decrement</button>\n+        <button onClick={() => setCount(0)}>🔁 Reset</button>\n+        <button onClick={() => setCount(count + 1)}>➕ Increment</button>\n       </div>\n       <div>\n         <form onSubmit={(e) => e.preventDefault()}>\n```\n\nWe'll worry about the form in a hot minute.\n\n## Taking a look at what TypeScript has figured out for us\n\nSo, this is where it gets kind of cool. This file doesn't look like TypeScript, but it _is_.\n\nIf you hover over `count`, you'll see that TypeScript was about to deduce that it's a number because you set its initial value to a number.\n\n```ts\nconst count: number;\n```\n\nYou can also see that it figured out that `setCount` should _only_ take a number, which means that `count` will _always_ be a number.\n\n```ts\nconst setCount: React.Dispatch<React.SetStateAction<number>>;\n```\n\nDon't worry about all of that ceremony. `useState` is an abstraction over `useReducer`, which works by dispatching actions.\n\nIf we try to break the rules, you'll see that TypeScript keeps us honest.\n\nThis is _particulary_ helpful when dealing with one of my least favorite parts of the browser: the fact that number inputs store their values as strings. 🙄\n","slug":"useState","title":"useState","section":"Hooks","icon":"hammer","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/05-hooks/A-useState.md","nextSlug":"/React-with-TypeScript/lessons/hooks/useState-exercise","prevSlug":"/React-with-TypeScript/lessons/children/built-In-types"}},"__N_SSG":true}