{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"built-in-types\"><strong>Built-In types</strong></h1>\n<br>\n\n<ul>\n<li><code>React.PropsWithChildren</code></li>\n<li><code>React.ComponentPropsWithoutRef</code></li>\n<li><code>FunctionalComponent&lt;Props&gt;</code> and React 18</li>\n<li><code>React.HTMLProps</code></li>\n</ul>\n<p>Let&#39;s say you want to extend props for a given React component to take children. You can use <code>React.PropsWithChildren</code>.</p>\n<p>This might look something like this:\n<br></p>\n<pre><code class=\"language-tsx\">type ButtonProps = React.PropsWithChildren&lt;{\n  onClick: () =&gt; void;\n}&gt;;\n\nconst Button = ({ children, onClick }: ButtonProps) =&gt; {\n  return &lt;button onClick={onClick}&gt;{children}&lt;/button&gt;;\n};\n</code></pre>\n<p>You also have <code>React.ComponentPropsWithoutRef</code>, which you couldâ€”and we willâ€”use as follows:</p>\n<pre><code class=\"language-tsx\">type ButtonProps = React.ComponentPropsWithoutRef&lt;&quot;button&quot;&gt;;\n\nconst Button = ({ children, onClick, type }: ButtonProps) =&gt; {\n  return (\n    &lt;button onClick={onClick} type={type}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n};\n</code></pre>\n<p>Now, <code>Button</code> has all of the some props as the native <code>&lt;button&gt;</code> element from the DOM.</p>\n<p>ðŸš¨ <strong>Important note</strong>: Prior to React 18, you coulkd also use a <a href=\"https://www.newline.co/@bespoyasov/how-to-define-props-with-children-in-react-typescript-app--56bd18be#using-functioncomponent-or-fc\"><code>FunctionalComponent&lt;Props&gt;</code></a> or <code>Component&lt;Props&gt;</code> to accomplish a similar goal:</p>\n<pre><code class=\"language-tsx\">import * as React from &quot;react&quot;;\n\n// ðŸš¨ No good anymore.\nconst Input: React.FC = ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;;\n</code></pre>\n<p>But, this was removed when <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210\">the types were refactored for React 18</a>. You can read more about the rationale <a href=\"https://solverfox.dev/writing/no-implicit-children/\">here</a>.</p>\n","markdown":"# **Built-In types**\n\n<br>\n\n- `React.PropsWithChildren`\n- `React.ComponentPropsWithoutRef`\n- `FunctionalComponent<Props>` and React 18\n- `React.HTMLProps`\n\nLet's say you want to extend props for a given React component to take children. You can use `React.PropsWithChildren`.\n\nThis might look something like this:\n<br>\n\n```tsx\ntype ButtonProps = React.PropsWithChildren<{\n  onClick: () => void;\n}>;\n\nconst Button = ({ children, onClick }: ButtonProps) => {\n  return <button onClick={onClick}>{children}</button>;\n};\n```\n\nYou also have `React.ComponentPropsWithoutRef`, which you couldâ€”and we willâ€”use as follows:\n\n```tsx\ntype ButtonProps = React.ComponentPropsWithoutRef<\"button\">;\n\nconst Button = ({ children, onClick, type }: ButtonProps) => {\n  return (\n    <button onClick={onClick} type={type}>\n      {children}\n    </button>\n  );\n};\n```\n\nNow, `Button` has all of the some props as the native `<button>` element from the DOM.\n\nðŸš¨ **Important note**: Prior to React 18, you coulkd also use a [`FunctionalComponent<Props>`](https://www.newline.co/@bespoyasov/how-to-define-props-with-children-in-react-typescript-app--56bd18be#using-functioncomponent-or-fc) or `Component<Props>` to accomplish a similar goal:\n\n```tsx\nimport * as React from \"react\";\n\n// ðŸš¨ No good anymore.\nconst Input: React.FC = ({ children }) => <div>{children}</div>;\n```\n\nBut, this was removed when [the types were refactored for React 18](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210). You can read more about the rationale [here](https://solverfox.dev/writing/no-implicit-children/).\n","slug":"built-In-types","title":"Built In Types","section":"Children","icon":"baby","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/04-children/C-built-In-types.md","nextSlug":"/React-with-TypeScript/lessons/hooks/useState","prevSlug":"/React-with-TypeScript/lessons/children/type-the-children-solution"}},"__N_SSG":true}