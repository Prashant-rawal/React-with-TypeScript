{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"solution\"><strong>Solution</strong></h1>\n<br>\n\n<ul>\n<li><code>JSX.Element;</code>: üí© This doesn&#39;t account for arrays (e.g. multiple elements) at all.</li>\n<li><code>JSX.Element | JSX.Element[];</code>¬†üòï This doesn&#39;t accept strings.</li>\n<li><code>React.ReactChildren;</code>: ü§™ Not at even an appropriate type; it&#39;s a <a href=\"https://reactjs.org/docs/react-api.html#reactchildren\">utility function</a>.</li>\n<li><code>React.ReactChild[];</code>: üòÄ Accepts multiple children, but it doesn&#39;t accept a single child.</li>\n<li><code>React.ReactNode;</code>: üèÜ Accepts everything.</li>\n</ul>\n<p>This will get everything working as expected:</p>\n<pre><code class=\"language-ts\">import React, { ReactNode } from &quot;react&quot;;\n\ntype BoxProps = { children: ReactNode };\n</code></pre>\n<h2 id=\"a-helpful-utility-type\">A helpful utility type</h2>\n<p>This is a pretty simple utility type that you <em>could</em> write yourself, but you don&#39;t have to.</p>\n<pre><code class=\"language-ts\">type PropsWithChildren&lt;P = unknown&gt; = P &amp; {\n  children?: ReactNode | undefined;\n};\n</code></pre>\n<p>It&#39;s basically an easy way to say, &quot;This component can render children.&quot; That&#39;s it. This means, we can refactor our example a little more.</p>\n<pre><code class=\"language-tsx\">import React, { PropsWithChildren } from &quot;react&quot;;\n\nconst Box = ({ children }: PropsWithChildren) =&gt; {\n  return (\n    &lt;section\n      className=&quot;m-4&quot;\n      style={{ padding: &quot;1em&quot;, border: &quot;5px solid purple&quot; }}\n    &gt;\n      {children}\n    &lt;/section&gt;\n  );\n};\n</code></pre>\n<p>What if we wanted to add additional props? We can actually pass <code>PropsWithChildren</code> an argument.</p>\n<pre><code class=\"language-tsx\">import React, { PropsWithChildren } from &quot;react&quot;;\n\ntype BoxProps = { color?: &quot;red&quot; | &quot;green&quot; | &quot;blue&quot; };\n\nconst Box = ({ children, color = &quot;red&quot; }: PropsWithChildren&lt;BoxProps&gt;) =&gt; {\n  return (\n    &lt;section\n      className=&quot;m-4&quot;\n      style={{ padding: &quot;1em&quot;, border: &quot;5px solid purple&quot;, color }}\n    &gt;\n      {children}\n    &lt;/section&gt;\n  );\n};\n\nconst Application = () =&gt; {\n  return (\n    &lt;main className=&quot;m-8&quot;&gt;\n      &lt;Box color=&quot;green&quot;&gt;\n        Just a string.\n        &lt;p&gt;Some HTML that is not nested.&lt;/p&gt;\n        &lt;Box&gt;\n          &lt;h2&gt;Another React component with one child.&lt;/h2&gt;\n        &lt;/Box&gt;\n        &lt;Box&gt;\n          &lt;h2 className=&quot;mb-4&quot;&gt;A nested React component with two children.&lt;/h2&gt;\n          &lt;p&gt;The second child.&lt;/p&gt;\n        &lt;/Box&gt;\n      &lt;/Box&gt;\n    &lt;/main&gt;\n  );\n};\n\nexport default Application;\n</code></pre>\n<p>Alternatively, this will work, but the version that I showed you above is standard practice:</p>\n<pre><code class=\"language-tsx\">const Box = ({ children, color = &quot;red&quot; }: PropsWithChildren &amp; BoxProps) =&gt; {\n  // ‚Ä¶\n};\n</code></pre>\n<p>We&#39;ll learn how to make our own utility types like this in a bit.</p>\n","markdown":"# **Solution**\n\n<br>\n\n- `JSX.Element;`: üí© This doesn't account for arrays (e.g. multiple elements) at all.\n- `JSX.Element | JSX.Element[];`¬†üòï This doesn't accept strings.\n- `React.ReactChildren;`: ü§™ Not at even an appropriate type; it's a [utility function](https://reactjs.org/docs/react-api.html#reactchildren).\n- `React.ReactChild[];`: üòÄ Accepts multiple children, but it doesn't accept a single child.\n- `React.ReactNode;`: üèÜ Accepts everything.\n\nThis will get everything working as expected:\n\n```ts\nimport React, { ReactNode } from \"react\";\n\ntype BoxProps = { children: ReactNode };\n```\n\n## A helpful utility type\n\nThis is a pretty simple utility type that you _could_ write yourself, but you don't have to.\n\n```ts\ntype PropsWithChildren<P = unknown> = P & {\n  children?: ReactNode | undefined;\n};\n```\n\nIt's basically an easy way to say, \"This component can render children.\" That's it. This means, we can refactor our example a little more.\n\n```tsx\nimport React, { PropsWithChildren } from \"react\";\n\nconst Box = ({ children }: PropsWithChildren) => {\n  return (\n    <section\n      className=\"m-4\"\n      style={{ padding: \"1em\", border: \"5px solid purple\" }}\n    >\n      {children}\n    </section>\n  );\n};\n```\n\nWhat if we wanted to add additional props? We can actually pass `PropsWithChildren` an argument.\n\n```tsx\nimport React, { PropsWithChildren } from \"react\";\n\ntype BoxProps = { color?: \"red\" | \"green\" | \"blue\" };\n\nconst Box = ({ children, color = \"red\" }: PropsWithChildren<BoxProps>) => {\n  return (\n    <section\n      className=\"m-4\"\n      style={{ padding: \"1em\", border: \"5px solid purple\", color }}\n    >\n      {children}\n    </section>\n  );\n};\n\nconst Application = () => {\n  return (\n    <main className=\"m-8\">\n      <Box color=\"green\">\n        Just a string.\n        <p>Some HTML that is not nested.</p>\n        <Box>\n          <h2>Another React component with one child.</h2>\n        </Box>\n        <Box>\n          <h2 className=\"mb-4\">A nested React component with two children.</h2>\n          <p>The second child.</p>\n        </Box>\n      </Box>\n    </main>\n  );\n};\n\nexport default Application;\n```\n\nAlternatively, this will work, but the version that I showed you above is standard practice:\n\n```tsx\nconst Box = ({ children, color = \"red\" }: PropsWithChildren & BoxProps) => {\n  // ‚Ä¶\n};\n```\n\nWe'll learn how to make our own utility types like this in a bit.\n","slug":"type-the-children-solution","title":"Type the Children Solution","section":"Children","icon":"baby","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/04-children/B-type-the-children-solution.md","nextSlug":"/React-with-TypeScript/lessons/children/built-In-types","prevSlug":"/React-with-TypeScript/lessons/children/type-the-children"}},"__N_SSG":true}