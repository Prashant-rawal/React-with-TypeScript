{"pageProps":{"post":{"attributes":{},"html":"<h2 id=\"type-the-children\"><strong>Type the Children</strong></h2>\n<br>\nI don't want to ruin the surprise for you, but if this workshop was solely about just strings and numbers, we'd be spending very little time together. Things can get a little bit tricky when we want to use TypeScript to specify non-primitive typesâ€”namely other React components.\n\n<p>It&#39;s due time that we got our first taste of that right now.</p>\n<p>Let&#39;s start with <a href=\"https://codesandbox.io/p/sandbox/typing-children-forked-tsrhmd?file=%2Fsrc%2Fcomponents%2Fapplication.tsx%3A35%2C22&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clqge2a010006356k4okhio4e%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clqge2a010002356kej7p616s%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clqge2a010003356kdydl61z6%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clqge2a010005356kkk848w7b%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clqge2a010002356kej7p616s%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqge2a000001356k6s3ab6dr%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252FREADME.md%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%252C%257B%2522id%2522%253A%2522clqgede4h0002356kglkpi6ei%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522initialSelections%2522%253A%255B%257B%2522startLineNumber%2522%253A35%252C%2522startColumn%2522%253A22%252C%2522endLineNumber%2522%253A35%252C%2522endColumn%2522%253A22%257D%255D%252C%2522filepath%2522%253A%2522%252Fsrc%252Fcomponents%252Fapplication.tsx%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522clqge2a010002356kej7p616s%2522%252C%2522activeTabId%2522%253A%2522clqgede4h0002356kglkpi6ei%2522%257D%252C%2522clqge2a010005356kkk848w7b%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqge2a010004356k8lvwvv9w%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A0%252C%2522path%2522%253A%2522%252F%2522%257D%255D%252C%2522id%2522%253A%2522clqge2a010005356kkk848w7b%2522%252C%2522activeTabId%2522%253A%2522clqge2a010004356k8lvwvv9w%2522%257D%252C%2522clqge2a010003356kdydl61z6%2522%253A%257B%2522tabs%2522%253A%255B%255D%252C%2522id%2522%253A%2522clqge2a010003356kdydl61z6%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D\">a super contrived example</a>. As it stands right now, <code>children</code> has the type of <code>any</code>, which is basically an opt-out of every that TypeScript has to offer you. This isn&#39;t great.</p>\n<br>\n\n<p>What should you noticed about this example?</p>\n<ul>\n<li><code>Box</code>Â rendersÂ <code>children</code>.</li>\n<li>It can render more than one child.</li>\n<li>That child can be another React component.</li>\n<li>That child can be a standard HTML element.</li>\n</ul>\n<p>But, what can we use to specify that a given prop should be another React component?</p>\n<br>\n\n<p>Off the top of my head, here are some things that you could try.</p>\n<ul>\n<li><code>JSX.Element</code></li>\n<li><code>JSX.Element[]</code></li>\n<li><code>JSX.Element | JSX.Element[]</code></li>\n<li><code>React.ReactNode</code></li>\n<li><code>React.ReactChildren</code></li>\n<li><code>React.ReactChild[]</code></li>\n</ul>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">BoxProps</span> = { <span class=\"hljs-attr\">children</span>: <span class=\"hljs-built_in\">any</span> <span class=\"hljs-comment\">/* ðŸ‘ˆ Get rid of this! */</span> };\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Box</span> = (<span class=\"hljs-params\">{ children }: BoxProps</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>\n      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;m-4&quot;</span>\n      <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">padding:</span> &quot;<span class=\"hljs-attr\">1em</span>&quot;, <span class=\"hljs-attr\">border:</span> &quot;<span class=\"hljs-attr\">5px</span> <span class=\"hljs-attr\">solid</span> <span class=\"hljs-attr\">purple</span>&quot; }}\n    &gt;</span>\n      {children}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Application</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;m-8&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Box</span>&gt;</span>\n        Just a string.\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Some HTML that is not nested.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Box</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Another React component with one child.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Box</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Box</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;mb-4&quot;</span>&gt;</span>A nested React component with two children.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>The second child.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Box</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Box</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Application</span>;\n</code></pre>\n<br>\n","markdown":"## **Type the Children**\n\n<br>\nI don't want to ruin the surprise for you, but if this workshop was solely about just strings and numbers, we'd be spending very little time together. Things can get a little bit tricky when we want to use TypeScript to specify non-primitive typesâ€”namely other React components.\n\nIt's due time that we got our first taste of that right now.\n\nLet's start with [a super contrived example](https://codesandbox.io/p/sandbox/typing-children-forked-tsrhmd?file=%2Fsrc%2Fcomponents%2Fapplication.tsx%3A35%2C22&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clqge2a010006356k4okhio4e%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clqge2a010002356kej7p616s%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clqge2a010003356kdydl61z6%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clqge2a010005356kkk848w7b%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clqge2a010002356kej7p616s%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqge2a000001356k6s3ab6dr%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252FREADME.md%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%252C%257B%2522id%2522%253A%2522clqgede4h0002356kglkpi6ei%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522initialSelections%2522%253A%255B%257B%2522startLineNumber%2522%253A35%252C%2522startColumn%2522%253A22%252C%2522endLineNumber%2522%253A35%252C%2522endColumn%2522%253A22%257D%255D%252C%2522filepath%2522%253A%2522%252Fsrc%252Fcomponents%252Fapplication.tsx%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522clqge2a010002356kej7p616s%2522%252C%2522activeTabId%2522%253A%2522clqgede4h0002356kglkpi6ei%2522%257D%252C%2522clqge2a010005356kkk848w7b%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqge2a010004356k8lvwvv9w%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A0%252C%2522path%2522%253A%2522%252F%2522%257D%255D%252C%2522id%2522%253A%2522clqge2a010005356kkk848w7b%2522%252C%2522activeTabId%2522%253A%2522clqge2a010004356k8lvwvv9w%2522%257D%252C%2522clqge2a010003356kdydl61z6%2522%253A%257B%2522tabs%2522%253A%255B%255D%252C%2522id%2522%253A%2522clqge2a010003356kdydl61z6%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D). As it stands right now, `children` has the type of `any`, which is basically an opt-out of every that TypeScript has to offer you. This isn't great.\n\n<br>\n\nWhat should you noticed about this example?\n\n- `Box`Â rendersÂ `children`.\n- It can render more than one child.\n- That child can be another React component.\n- That child can be a standard HTML element.\n\nBut, what can we use to specify that a given prop should be another React component?\n\n<br>\n\nOff the top of my head, here are some things that you could try.\n\n- `JSX.Element`\n- `JSX.Element[]`\n- `JSX.Element | JSX.Element[]`\n- `React.ReactNode`\n- `React.ReactChildren`\n- `React.ReactChild[]`\n\n```tsx\ntype BoxProps = { children: any /* ðŸ‘ˆ Get rid of this! */ };\n\nconst Box = ({ children }: BoxProps) => {\n  return (\n    <section\n      className=\"m-4\"\n      style={{ padding: \"1em\", border: \"5px solid purple\" }}\n    >\n      {children}\n    </section>\n  );\n};\n\nconst Application = () => {\n  return (\n    <main className=\"m-8\">\n      <Box>\n        Just a string.\n        <p>Some HTML that is not nested.</p>\n        <Box>\n          <h2>Another React component with one child.</h2>\n        </Box>\n        <Box>\n          <h2 className=\"mb-4\">A nested React component with two children.</h2>\n          <p>The second child.</p>\n        </Box>\n      </Box>\n    </main>\n  );\n};\n\nexport default Application;\n```\n\n<br>\n","slug":"type-the-children","title":"Type the Children","section":"Children","icon":"baby","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/04-children/A-type-the-children.md","nextSlug":"/React-with-TypeScript/lessons/children/type-the-children-solution","prevSlug":"/React-with-TypeScript/lessons/PropTypes/commonly-used-props"}},"__N_SSG":true}