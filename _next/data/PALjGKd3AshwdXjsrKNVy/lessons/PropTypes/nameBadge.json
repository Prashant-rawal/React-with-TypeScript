{"pageProps":{"post":{"attributes":{},"html":"<h1 id=\"typescript-without-typescript\">TypeScript without TypeScript</h1>\n<br>\n\n<p><strong>Alternative title</strong>: Using TypeScript with Intellisense.</p>\n<p>We&#39;re going to start off in <a href=\"https://codesandbox.io/p/sandbox/namebadge-tp47tn?layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clqaoksbe0006356lwehtcfji%2522%252C%2522sizes%2522%253A%255B72.97723292469352%252C27.022767075306476%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clqaoksbd0002356lm7a4aaqi%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clqaoksbd0003356lvmzz5ay6%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clqaoksbd0005356l6tg7ebcq%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50.77354018530489%252C49.22645981469511%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clqaoksbd0002356lm7a4aaqi%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqaoksbd0001356liuqlefa3%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252Fpublic%252Findex.html%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522clqaoksbd0002356lm7a4aaqi%2522%252C%2522activeTabId%2522%253A%2522clqaoksbd0001356liuqlefa3%2522%257D%252C%2522clqaoksbd0005356l6tg7ebcq%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqaoksbd0004356liahlr3lc%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A0%252C%2522path%2522%253A%2522%252F%2522%257D%255D%252C%2522id%2522%253A%2522clqaoksbd0005356l6tg7ebcq%2522%252C%2522activeTabId%2522%253A%2522clqaoksbd0004356liahlr3lc%2522%257D%252C%2522clqaoksbd0003356lvmzz5ay6%2522%253A%257B%2522tabs%2522%253A%255B%255D%252C%2522id%2522%253A%2522clqaoksbd0003356lvmzz5ay6%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D\">this codeSandbox repository</a> for the time being.</p>\n<h2 id=\"typescript-configuration\">TypeScript Configuration</h2>\n<h2 id=\"compileroptions\"><code>compilerOptions</code>:</h2>\n<ul>\n<li><p><strong>target:</strong> Specifies the ECMAScript target version for the compiled JavaScript. In this case, it&#39;s set to &quot;es5,&quot; which means the generated JavaScript should be compatible with ECMAScript 5.</p>\n</li>\n<li><p><strong>lib:</strong> Specifies a set of built-in TypeScript declaration files to include in the compilation. In this example, it includes declarations for the DOM, DOM Iterable, and ESNext.</p>\n</li>\n<li><p><strong>allowJs:</strong> Allows the inclusion of JavaScript files in the TypeScript project.</p>\n</li>\n<li><p><strong>skipLibCheck:</strong> Skips type checking of all the declaration files (.d.ts) in the project.</p>\n</li>\n<li><p><strong>esModuleInterop:</strong> Enables compatibility with modules using CommonJS-style imports.</p>\n</li>\n<li><p><strong>allowSyntheticDefaultImports:</strong> Allows default imports from modules with no default export.</p>\n</li>\n<li><p><strong>strict:</strong> Enables all strict type-checking options. It&#39;s a shorthand for enabling a set of strict checks.</p>\n</li>\n<li><p><strong>forceConsistentCasingInFileNames:</strong> Ensures that files included in the project have consistent casing of their names.</p>\n</li>\n<li><p><strong>noFallthroughCasesInSwitch:</strong> Reports errors for fallthrough cases in switch statements.</p>\n</li>\n<li><p><strong>module:</strong> Specifies the module system for the generated code. In this case, it&#39;s set to &quot;esnext,&quot; indicating ECMAScript modules.</p>\n</li>\n<li><p><strong>moduleResolution:</strong> Specifies how module names are resolved. It&#39;s set to &quot;node,&quot; which means the Node.js module resolution strategy.</p>\n</li>\n<li><p><strong>resolveJsonModule:</strong> Enables importing JSON files as modules.</p>\n</li>\n<li><p><strong>isolatedModules:</strong> Disallows files from being transpiled separately. Each file is treated as a separate module.</p>\n</li>\n<li><p><strong>noEmit:</strong> Prevents TypeScript from emitting output files (JavaScript files). This is useful when you only want to perform type-checking without generating the actual JavaScript code.</p>\n</li>\n<li><p><strong>jsx:</strong> Specifies the JSX factory function to use when targeting React JSX emit. In this case, it&#39;s set to &quot;react-jsx.&quot;</p>\n</li>\n</ul>\n<h2 id=\"include\"><code>include</code>:</h2>\n<ul>\n<li>Specifies the files or patterns to include in the compilation. In this case, it includes all files under the &quot;src&quot; directory.</li>\n</ul>\n<p>Alright, let&#39;s start simple here and play a fun game: Is the component below written in JavaScript or TypeScript?</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">NameBadge</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;badge&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;badge-header&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;text-5xl&quot;</span>&gt;</span>HELLO<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>My name isâ€¦<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;badge-body&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;badge-name&quot;</span>&gt;</span>Prashant Rawal<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;badge-footer&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">NameBadge</span>;\n</code></pre>\n<p>The correct answer is &quot;yes.&quot; If we&#39;re being pedantic, since the file ends in <code>.tsx</code>, it&#39;s <em>technically</em> TypeScript, but if I changed the file extension to <code>.jsx</code>, it would be perfectly fine. (Franky, other than all the <code>className</code> attributes, it could just be HTML with a little tweaking. There isn&#39;t really much going on with this component.)</p>\n<p>This is one of the core principles that I want us to remember during our time together: Generally speaking, <strong>TypeScript tries its best to get our of your way</strong>. It will do it&#39;s best to figure out what&#39;s going on. You only need to step in when it can&#39;t figure it out on your behalf.</p>\n<p>But, you will notice that Visual Studio Code&#39;s Intellisense is trying its best to figure out the types for you. If you hover over <code>NameBadge</code>, you&#39;ll see the following:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NameBadge</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable constant_\">JSX</span>.<span class=\"hljs-property\">Element</span>;\n</code></pre>\n<p>This makes sense. Functions are valid React components these days and since we&#39;re returning JSX, it deduced that the return type of this function is a <code>JSX.element</code>.</p>\n<p>For fun, let&#39;s add a simple little function at the bottom of the file just to confirm our suspicions.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">four</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p>If you hover this function, you&#39;ll see:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">four</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">number</span>;\n</code></pre>\n<p>We didn&#39;t have to give the function a return type. TypeScript figured it out. It analyzed the function and saw that there is only one kind of value that is ever coming out of the functionâ€”a number. So, it went ahead and typed it for us.</p>\n<p>If we add some chaos to the equation, you&#39;ll see that TypeScript respects the confusion that you caused.</p>\n<pre><code class=\"hljs language-diff\"> const NameBadge = () =&gt; {\n<span class=\"hljs-addition\">+  if (Math.round(Math.random())) return null;</span>\n   return (\n</code></pre>\n<p>Now, TypeScript tells us that this function will give us either a <code>JSX.Element</code> <em>or</em> it&#39;s going to give us <code>null</code> depending on which way the winds blow.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">NameBadge</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable constant_\">JSX</span>.<span class=\"hljs-property\">Element</span> | <span class=\"hljs-literal\">null</span>;\n</code></pre>\n","markdown":"# TypeScript without TypeScript\n\n<br>\n\n**Alternative title**: Using TypeScript with Intellisense.\n\nWe're going to start off in [this codeSandbox repository](https://codesandbox.io/p/sandbox/namebadge-tp47tn?layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clqaoksbe0006356lwehtcfji%2522%252C%2522sizes%2522%253A%255B72.97723292469352%252C27.022767075306476%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clqaoksbd0002356lm7a4aaqi%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clqaoksbd0003356lvmzz5ay6%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clqaoksbd0005356l6tg7ebcq%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50.77354018530489%252C49.22645981469511%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clqaoksbd0002356lm7a4aaqi%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqaoksbd0001356liuqlefa3%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252Fpublic%252Findex.html%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522clqaoksbd0002356lm7a4aaqi%2522%252C%2522activeTabId%2522%253A%2522clqaoksbd0001356liuqlefa3%2522%257D%252C%2522clqaoksbd0005356l6tg7ebcq%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clqaoksbd0004356liahlr3lc%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A0%252C%2522path%2522%253A%2522%252F%2522%257D%255D%252C%2522id%2522%253A%2522clqaoksbd0005356l6tg7ebcq%2522%252C%2522activeTabId%2522%253A%2522clqaoksbd0004356liahlr3lc%2522%257D%252C%2522clqaoksbd0003356lvmzz5ay6%2522%253A%257B%2522tabs%2522%253A%255B%255D%252C%2522id%2522%253A%2522clqaoksbd0003356lvmzz5ay6%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D) for the time being.\n\n## TypeScript Configuration\n\n## `compilerOptions`:\n\n- **target:** Specifies the ECMAScript target version for the compiled JavaScript. In this case, it's set to \"es5,\" which means the generated JavaScript should be compatible with ECMAScript 5.\n\n- **lib:** Specifies a set of built-in TypeScript declaration files to include in the compilation. In this example, it includes declarations for the DOM, DOM Iterable, and ESNext.\n\n- **allowJs:** Allows the inclusion of JavaScript files in the TypeScript project.\n\n- **skipLibCheck:** Skips type checking of all the declaration files (.d.ts) in the project.\n\n- **esModuleInterop:** Enables compatibility with modules using CommonJS-style imports.\n\n- **allowSyntheticDefaultImports:** Allows default imports from modules with no default export.\n\n- **strict:** Enables all strict type-checking options. It's a shorthand for enabling a set of strict checks.\n\n- **forceConsistentCasingInFileNames:** Ensures that files included in the project have consistent casing of their names.\n\n- **noFallthroughCasesInSwitch:** Reports errors for fallthrough cases in switch statements.\n\n- **module:** Specifies the module system for the generated code. In this case, it's set to \"esnext,\" indicating ECMAScript modules.\n\n- **moduleResolution:** Specifies how module names are resolved. It's set to \"node,\" which means the Node.js module resolution strategy.\n\n- **resolveJsonModule:** Enables importing JSON files as modules.\n\n- **isolatedModules:** Disallows files from being transpiled separately. Each file is treated as a separate module.\n\n- **noEmit:** Prevents TypeScript from emitting output files (JavaScript files). This is useful when you only want to perform type-checking without generating the actual JavaScript code.\n\n- **jsx:** Specifies the JSX factory function to use when targeting React JSX emit. In this case, it's set to \"react-jsx.\"\n\n## `include`:\n\n- Specifies the files or patterns to include in the compilation. In this case, it includes all files under the \"src\" directory.\n\nAlright, let's start simple here and play a fun game: Is the component below written in JavaScript or TypeScript?\n\n```tsx\nconst NameBadge = () => {\n  return (\n    <section className=\"badge\">\n      <header className=\"badge-header\">\n        <h1 className=\"text-5xl\">HELLO</h1>\n        <p>My name isâ€¦</p>\n      </header>\n      <div className=\"badge-body\">\n        <p className=\"badge-name\">Prashant Rawal</p>\n      </div>\n      <footer className=\"badge-footer\" />\n    </section>\n  );\n};\n\nexport default NameBadge;\n```\n\nThe correct answer is \"yes.\" If we're being pedantic, since the file ends in `.tsx`, it's _technically_ TypeScript, but if I changed the file extension to `.jsx`, it would be perfectly fine. (Franky, other than all the `className` attributes, it could just be HTML with a little tweaking. There isn't really much going on with this component.)\n\nThis is one of the core principles that I want us to remember during our time together: Generally speaking, **TypeScript tries its best to get our of your way**. It will do it's best to figure out what's going on. You only need to step in when it can't figure it out on your behalf.\n\nBut, you will notice that Visual Studio Code's Intellisense is trying its best to figure out the types for you. If you hover over `NameBadge`, you'll see the following:\n\n```ts\nconst NameBadge: () => JSX.Element;\n```\n\nThis makes sense. Functions are valid React components these days and since we're returning JSX, it deduced that the return type of this function is a `JSX.element`.\n\nFor fun, let's add a simple little function at the bottom of the file just to confirm our suspicions.\n\n```ts\nconst four = () => 2 + 2;\n```\n\nIf you hover this function, you'll see:\n\n```ts\nconst four: () => number;\n```\n\nWe didn't have to give the function a return type. TypeScript figured it out. It analyzed the function and saw that there is only one kind of value that is ever coming out of the functionâ€”a number. So, it went ahead and typed it for us.\n\nIf we add some chaos to the equation, you'll see that TypeScript respects the confusion that you caused.\n\n```diff\n const NameBadge = () => {\n+  if (Math.round(Math.random())) return null;\n   return (\n```\n\nNow, TypeScript tells us that this function will give us either a `JSX.Element` _or_ it's going to give us `null` depending on which way the winds blow.\n\n```ts\nconst NameBadge: () => JSX.Element | null;\n```\n","slug":"nameBadge","title":"nameBadge","section":"PropTypes","icon":"file-code","filePath":"/home/runner/work/React-with-TypeScript/React-with-TypeScript/lessons/03-PropTypes/A-nameBadge.md","nextSlug":"/React-with-TypeScript/lessons/PropTypes/migrating-from-proptypes","prevSlug":"/React-with-TypeScript/lessons/about-workshop-and-me/why"}},"__N_SSG":true}